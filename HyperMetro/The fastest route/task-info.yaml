type: edu
files:
- name: src/metro/Main.java
  visible: true
  text: |
    package metro;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/lausanne.json
  visible: false
  text: |-
    {
      "m1": {
        "1": {
          "name": "Renes—Gare",
          "transfer": [],
          "time": 3
        },
        "2": {
          "name": "Epenex",
          "transfer": [],
          "time": 2
        },
        "3": {
          "name": "Crochy",
          "transfer": [],
          "time": 6
        },
        "4": {
          "name": "Cerisaie",
          "transfer": [],
          "time": 5
        },
        "5": {
          "name": "Bassenges",
          "transfer": [],
          "time": 4
        },
        "6": {
          "name": "EPFL",
          "transfer": [],
          "time": 6
        },
        "7": {
          "name": "UNL—Sorge",
          "transfer": [],
          "time": 8
        },
        "8": {
          "name": "Mouline",
          "transfer": [],
          "time": 5
        },
        "9": {
          "name": "UNL—Chemberonne",
          "transfer": [],
          "time": 4
        },
        "10": {
          "name": "Bourdonnette",
          "transfer": [],
          "time": 5
        },
        "11": {
          "name": "Melley",
          "transfer": [],
          "time": 7
        },
        "12": {
          "name": "Provence",
          "transfer": [],
          "time": 6
        },
        "13": {
          "name": "Montelly",
          "transfer": [],
          "time": 5
        },
        "14": {
          "name": "Vigie",
          "transfer": [],
          "time": 4
        },
        "15": {
          "name": "Lausanne—Flon",
          "transfer": [],
          "time": null
        }
      },
      "m2": {
        "1": {
          "name": "Croisettes",
          "transfer": [],
          "time": 6
        },
        "2": {
          "name": "Vennes",
          "transfer": [],
          "time": 5
        },
        "3": {
          "name": "Fourmi",
          "transfer": [],
          "time": 4
        },
        "4": {
          "name": "Sallaz",
          "transfer": [],
          "time": 6
        },
        "5": {
          "name": "CHUV",
          "transfer": [],
          "time": 5
        },
        "6": {
          "name": "Ours",
          "transfer": [],
          "time": 3
        },
        "7": {
          "name": "Riponne M.Bejart",
          "transfer": [],
          "time": 4
        },
        "8": {
          "name": "Bessieres",
          "transfer": [],
          "time": 6
        },
        "9": {
          "name": "Lausanne—Flon",
          "transfer": [],
          "time": 5
        },
        "10": {
          "name": "Lausanne Gare CFF",
          "transfer": [],
          "time": 3
        },
        "11": {
          "name": "Grancy",
          "transfer": [],
          "time": 4
        },
        "12": {
          "name": "Delices",
          "transfer": [],
          "time": 6
        },
        "13": {
          "name": "Jourdils",
          "transfer": [],
          "time": 3
        },
        "14": {
          "name": "Ouchy—Olympique",
          "transfer": [],
          "time": null
        }
      }
    }
  learner_created: false
- name: test/prague.json
  visible: false
  text: |-
    {
      "Linka A": {
        "1": {
          "name": "Nemocnice Motol" ,
          "transfer": []
        } ,
        "2": {
          "name": "Petriny" ,
          "transfer": []
        } ,
        "3": {
          "name": "Nadrazi Veleslavin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Borislavka" ,
          "transfer": []
        } ,
        "5": {
          "name": "Dejvicka" ,
          "transfer": []
        } ,
        "6": {
          "name": "Hradcanska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Malostranska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Staromestska" ,
          "transfer": []
        } ,
        "9": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Mustek"
            }
          ]
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Miru" ,
          "transfer": []
        } ,
        "12": {
          "name": "Jiriho z Podebrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Flora" ,
          "transfer": []
        } ,
        "14": {
          "name": "Zelivskeho" ,
          "transfer": []
        } ,
        "15": {
          "name": "Strasnicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Skalka" ,
          "transfer": []
        } ,
        "17": {
          "name": "Depo Hostivar" ,
          "transfer": []
        }
      } ,
      "Linka B": {
        "1": {
          "name": "Cerny Most" ,
          "transfer": []
        } ,
        "2": {
          "name": "Rajska zahrada" ,
          "transfer": []
        } ,
        "3": {
          "name": "Hloubetin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Kolbenova" ,
          "transfer": []
        } ,
        "5": {
          "name": "Vysocanska" ,
          "transfer": []
        } ,
        "6": {
          "name": "Ceskomoravska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Palmovka" ,
          "transfer": []
        } ,
        "8": {
          "name": "Invalidovna" ,
          "transfer": []
        } ,
        "9": {
          "name": "Krizikova" ,
          "transfer": []
        } ,
        "10": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Florenc"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Republiky" ,
          "transfer": []
        } ,
        "12": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Mustek"
            }
          ]
        } ,
        "13": {
          "name": "Narodni trida" ,
          "transfer": []
        } ,
        "14": {
          "name": "Karlovo namesti" ,
          "transfer": []
        } ,
        "15": {
          "name": "Andel" ,
          "transfer": []
        } ,
        "16": {
          "name": "Smichovske nadrazi" ,
          "transfer": []
        } ,
        "17": {
          "name": "Radlicka" ,
          "transfer": []
        } ,
        "18": {
          "name": "Jinonice" ,
          "transfer": []
        } ,
        "19": {
          "name": "Nove Butovice" ,
          "transfer": []
        } ,
        "20": {
          "name": "Hurka" ,
          "transfer": []
        } ,
        "21": {
          "name": "Luziny" ,
          "transfer": []
        } ,
        "22": {
          "name": "Luka" ,
          "transfer": []
        } ,
        "23": {
          "name": "Stodulky" ,
          "transfer": []
        } ,
        "24": {
          "name": "Zlicin" ,
          "transfer": []
        }
      } ,
      "Linka C": {
        "1": {
          "name": "Letnany" ,
          "transfer": []
        } ,
        "2": {
          "name": "Prosek" ,
          "transfer": []
        } ,
        "3": {
          "name": "Strizkov" ,
          "transfer": []
        } ,
        "4": {
          "name": "Ladvi" ,
          "transfer": []
        } ,
        "5": {
          "name": "Kobylisy" ,
          "transfer": []
        } ,
        "6": {
          "name": "Nadrazi Holesovice" ,
          "transfer": []
        } ,
        "7": {
          "name": "Vltavska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Florenc"
            }
          ]
        } ,
        "9": {
          "name": "Hlavni nadrazi" ,
          "transfer": []
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka A" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "I.P.Pavlova" ,
          "transfer": []
        } ,
        "12": {
          "name": "Vysehrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Prazskeho povstani" ,
          "transfer": []
        } ,
        "14": {
          "name": "Pankrac" ,
          "transfer": []
        } ,
        "15": {
          "name": "Budejovicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Kacerov" ,
          "transfer": []
        } ,
        "17": {
          "name": "Roztyly" ,
          "transfer": []
        } ,
        "18": {
          "name": "Chodov" ,
          "transfer": []
        } ,
        "19": {
          "name": "Opatov" ,
          "transfer": []
        } ,
        "20": {
          "name": "Haje" ,
          "transfer": []
        }
      }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class Tests extends StageTest<String> {
        // multiple line output
        @DynamicTest(order = 1)
        CheckResult multipleLineOutputTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");
            String output = main.execute("/output \"m1\"").trim();

            String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            stations = new String[]{"Croisettes", "Vennes", "Fourmi", "Sallaz", "CHUV", "Ours",
                "Riponne M.Bejart", "Bessieres", "Lausanne—Flon", "Lausanne Gare CFF", "Grancy", "Delices", "Jourdils",
                "Ouchy—Olympique"};

            output = main.execute("/output \"m2\"");
            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            return CheckResult.correct();
        }

        // addition test
        @DynamicTest(order = 2)
        CheckResult additionTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");

            // added a station to the end of the line
            main.execute("/append \"m1\" \"Test station 1\"");
            String output = main.execute("/output \"m1\"");

            String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            // added another one
            main.execute("/append \"m1\" \"Test station 2\"");
            output = main.execute("/output \"m1\"");

            stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            // added one station to the beginning of the line
            main.execute("/add-head \"m1\" \"Head\"");
            output = main.execute("/output \"m1\"");

            stations = new String[]{"Head", "Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations
            );

            return CheckResult.correct();
        }

        // not existing file check
        @DynamicTest(order = 3)
        CheckResult nonexistingFileTest() {
            TestedProgram main = new TestedProgram();
            String output = main.start("tHiS_fIlE_DoEs_nOt_ExIsT.txt");
            if (output.trim().length() == 0) {
                return CheckResult.wrong("The program did not print anything when the file was not exist. ");
            }
            if (output.toLowerCase().startsWith("depot") || output.toLowerCase().endsWith("depot")) {
                return CheckResult.wrong("It looks like the program did not print an error message when the file was not exist.");
            }
            return CheckResult.correct();
        }

        // output with transfers
        @DynamicTest(order = 4)
        CheckResult outputLineWithTransfer() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{
                {"Nemocnice Motol", null},
                {"Petriny", null},
                {"Nadrazi Veleslavin", null},
                {"Borislavka", null},
                {"Dejvicka", null},
                {"Hradcanska", null},
                {"Malostranska", null},
                {"Staromestska", null},
                {"Mustek", "Linka B"},
                {"Muzeum", "Linka C"},
                {"Namesti Miru", null},
                {"Jiriho z Podebrad", null},
                {"Flora", null},
                {"Zelivskeho", null},
                {"Strasnicka", null},
                {"Skalka", null},
                {"Depo Hostivar", null}
            };

            String output = main.execute("/output \"Linka A\"");
            checkDepots(output);

            checkOutputLength(output, stations.length + 2);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        // connections test
        @DynamicTest(order = 5)
        CheckResult connectLinesTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{{"Nemocnice Motol", null}, {"Petriny", "Linka C"},
                {"Nadrazi Veleslavin", null}, {"Borislavka", null}, {"Dejvicka", null}, {"Hradcanska", null},
                {"Malostranska", null}, {"Staromestska", null}, {"Mustek", "Linka B"}, {"Muzeum", "Linka C"},
                {"Namesti Miru", null}, {"Jiriho z Podebrad", null}, {"Flora", null}, {"Zelivskeho", null},
                {"Strasnicka", null}, {"Skalka", null}, {"Depo Hostivar", null}
            };
            main.execute("/connect \"Linka C\" \"I.P.Pavlova\" \"Linka A\" \"Petriny\"");

            String output = main.execute("/output \"Linka A\"");

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult simpleRouteTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[] correctRoute = {"Petriny", "Nadrazi Veleslavin", "Borislavka", "Dejvicka", "Hradcanska", "Malostranska",
                "Staromestska", "Mustek", "Muzeum", "Namesti Miru", "Jiriho z Podebrad", "Flora"};

            String[] sOutput = main.execute("/route \"Linka A\" \"Petriny\" \"Linka A\" \"Flora\"").toLowerCase().split("\n");

            if (sOutput.length != correctRoute.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                    "Expected: " + correctRoute.length + " stations." +
                    "\nYour output: " + sOutput.length + " stations.");
            }

            for (int i = 0; i < correctRoute.length; i++) {
                if (i == 0 && !correctRoute[i].equalsIgnoreCase(sOutput[i])) {
                    return CheckResult.wrong("The first station in the output should be '" + correctRoute[i] + "'.");
                } else if (i != 0) {
                    if (!correctRoute[i].equalsIgnoreCase(sOutput[i])) {
                        return CheckResult.wrong("After '" + correctRoute[i - 1] + "' should be '" + correctRoute[i] + "'.");
                    }
                }
            }

            return CheckResult.correct();
        }

        // advanced route test
        @DynamicTest(order = 7)
        CheckResult advancedRouteTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[] route = {"Vysehrad", "I.P.Pavlova", "Muzeum",
                "Linka A", "Muzeum", "Mustek",
                "Linka B", "Mustek", "Namesti Republiky"};
            String[] sOutput = main.execute("/route \"Linka C\" \"Vysehrad\" \"Linka B\" \"Namesti Republiky\"").split("\n");

            if (sOutput.length != 9) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.");
            }

            int index = 0;
            for (String station : sOutput) {
                if (!station.toLowerCase().trim().contains(route[index].toLowerCase())) {
                    return CheckResult.wrong("The route is incorrect. Wrong stations were displayed");
                }
                index++;
            }

            return CheckResult.correct();
        }

        // simple test with time
        @DynamicTest(order = 8)
        CheckResult simpleTime() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague_w_time.json");

            String[] route = {"Borislavka", "Dejvicka", "Hradcanska", "Malostranska", "Staromestska", "Mustek", "Muzeum",
                "Namesti Miru", "Jiriho z Podebrad", "Flora", "44"};
            String[] sOutput = main.execute("/fastest-route \"Linka A\" \"Borislavka\" \"Linka A\" \"Flora\"").split("\n");

            if (sOutput.length != route.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route. Expected 10 stations and the total time!");
            }

            int index = 0;
            for (String station : sOutput) {
                if (!station.toLowerCase().trim().contains(route[index].toLowerCase())) {
                    return CheckResult.wrong("The route is incorrect. Wrong stations were displayed");
                }
                index++;
            }

            return CheckResult.correct();
        }

        // advanced test with time
        @DynamicTest(order = 9)
        CheckResult advancedTime() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague_w_time.json");

            String[] route = {"Vysehrad", "I.P.Pavlova", "Muzeum", "Hlavni nadrazi", "Florenc",
                "Linka B", "Florenc", "Namesti Republiky", "29"
            };

            String[] sOutput = main.execute("/fastest-route \"Linka C\" \"Vysehrad\" \"Linka B\" \"Namesti Republiky\"")
                .split("\n");

            if (sOutput.length != 9) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route. Expected 8 stations and the total time!");
            }

            int index = 0;
            for (String station : sOutput) {
                if (!station.toLowerCase().trim().contains(route[index].toLowerCase())) {
                    return CheckResult.wrong("The route is incorrect. Wrong stations were displayed");
                }
                index++;
            }

            return CheckResult.correct();
        }

        // checks for "depot" at the start and at the end
        void checkDepots(String output) {
            output = output.trim().toLowerCase();
            if (!output.startsWith("depot")) {
                throw new WrongAnswer("Your output should start with 'depot'.");
            } else if (!output.endsWith("depot")) {
                throw new WrongAnswer("Your output should end with 'depot'.");
            }
        }

        // checks number of stations in output
        void checkOutputLength(String output, int correctLength) {
            int length = output.trim().split("\n").length;
            if (length != correctLength) {
                throw new WrongAnswer("You output contains wrong number of lines.\n" +
                    "Expected: " + correctLength + " lines\n" +
                    "Your output: " + length + " lines");
            }
        }

        // checks stations
        void assertStations(String output, String[] stations) {

            String[] sOutput = output.trim().split("\n");

            for (int i = 0; i < stations.length; i++) {
                if (!sOutput[i + 1].equals(stations[i])) {
                    throw new WrongAnswer("Can't find station '" + stations[i] + "' in the line number " + (i + 2));
                }
            }
        }

        void assertWithTransfer(String output, String[][] stations) {

            String[] sOutput = output.split("\n");

            for (int i = 0; i < stations.length; i++) {
                String currentLine = sOutput[i + 1].toLowerCase().trim();
                String currentStation = stations[i][0];
                String currentTransfer = stations[i][1];
                if (currentTransfer == null) {
                    if (!currentLine.equals(currentStation.toLowerCase())) {
                        throw new WrongAnswer("There is an error in your program's reply. Some stations were not found.");
                    }
                } else if (!currentLine.contains(currentStation.toLowerCase()) ||
                    !currentLine.contains(currentTransfer.toLowerCase())) {
                    throw new WrongAnswer("Expected transfer to '" + currentTransfer + "' from '" + currentStation + "' station.");
                }
            }
        }
    }
  learner_created: false
- name: src/metro/allLines/MetroGsonSerializer.java
  visible: true
  text: |
    package metro.allLines;

    import com.google.gson.*;

    import java.lang.reflect.Type;
    import java.util.LinkedList;
    import java.util.List;

    public class MetroGsonSerializer implements JsonSerializer<Metro> {

        @Override
        public JsonElement serialize(Metro src, Type typeOfSrc, JsonSerializationContext context) {
            JsonObject metroJsonObject = new JsonObject();

            List<Station> stations = src.getStations();
            List<Line> lines = new LinkedList<>();

            for (Station station: stations) {
                metroJsonObject.addProperty(station.getLine().getLineName(), "1");
            }
            metroJsonObject.keySet().forEach(x -> lines.add(new Line(x)));

            for (Line line: lines) {
                JsonObject stationWithNumberJsonObject = new JsonObject();

                for (Station station: stations) {
                    JsonObject stationJsonObject = new JsonObject();
                    JsonObject transferJsonObject = new JsonObject();
                    stationJsonObject.addProperty("name", station.getName());
                    if (station.getTransfer() != null) {
                        transferJsonObject.addProperty("line", station.getTransfer().getLine());
                        transferJsonObject.addProperty("station", station.getTransfer().getStation());
                        stationJsonObject.add("transfer", transferJsonObject);

                    } else {
                        stationJsonObject.add("transfer", null);
                    }

                    if (station.getLine().getLineName().equals(line.getLineName())) {
                        stationWithNumberJsonObject.add(String.valueOf(station.getNumber()), stationJsonObject);
                        System.out.println(stationWithNumberJsonObject);
                    }
                }
                metroJsonObject.add(line.getLineName(), stationWithNumberJsonObject);
            }
            return metroJsonObject;
        }
    }
  learner_created: true
- name: src/metro/Command.java
  visible: true
  text: |
    package metro;

    import java.util.logging.Level;
    import java.util.logging.Logger;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;



    public class Command {
        private String command;
        private String value;


        public String getCommand() {
            return command;
        }

        public String getValue() {
            return value;
        }

        public Command(String command, String value) {
            this.command = command;
            this.value = value;
        }

        public static Command defineCommand(String input) {
            String command = "";
            String value = "";

            Pattern p = Pattern.compile("/[\\w-]*");
            Matcher m = p.matcher(input);

            if (m.find()) {
                command = m.group().substring(1);
            }

            Logger logger = Logger.getLogger(Command.class.getName());
            logger.log(Level.INFO, command);
            int space = input.indexOf(" ") + 1;
            value = input.substring(space);
            return new Command(command, value);
        }

    }
  learner_created: true
- name: src/metro/Programm.java
  visible: true
  text: |
    package metro;

    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import metro.allLines.Metro;
    import metro.allLines.MetroGsonDeserializer;
    import metro.allLines.Station;

    import java.io.File;
    import java.nio.file.Paths;
    import java.util.HashMap;
    import java.util.LinkedList;
    import java.util.List;
    import java.util.Scanner;

    public class Programm {
        private Scanner scanner = new Scanner(System.in);
        public static List<Station> stationsList = new LinkedList<>();
        public static boolean isON = true;

        public void start(String fileName) {

            File file = new File(fileName);
            Gson gson = new GsonBuilder()
                    .registerTypeAdapter(Metro.class, new MetroGsonDeserializer())
                    .disableHtmlEscaping()
                    .setPrettyPrinting()
                    .serializeNulls()
                    .create();
            Metro metro;
            if (file.exists()) {
                String json = FileHandler.handleFile(fileName);
                System.out.println(json);
                metro = gson.fromJson(json, Metro.class);
                stationsList = metro.getStations();
            } else {
                System.out.println("Error! Such a file doesn't exist!");
            }


            while (isON) {
                String line = scanner.nextLine();
                CommandHandler.handleCommand(Command.defineCommand(line));
            }

        }

        public void start() {
            Gson gson = new GsonBuilder()
                    .registerTypeAdapter(Metro.class, new MetroGsonDeserializer())
                    .disableHtmlEscaping()
                    .setPrettyPrinting()
                    .serializeNulls()
                    .create();


            String json = FileHandler.handleFile("C:\\Users\\irbis\\Desktop\\Java\\prague.json");
            Metro metro = gson.fromJson(json, Metro.class);
            stationsList = metro.getStations();


            while (isON) {
                String line = scanner.nextLine();
                CommandHandler.handleCommand(Command.defineCommand(line));
            }

        }


    }
  learner_created: true
- name: src/metro/JsonConverter.java
  visible: true
  text: |
    package metro;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import com.google.gson.JsonSyntaxException;
    import metro.allLines.Line;
    import metro.allLines.Station;
    import metro.allLines.Transfer;

    import java.util.*;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    import static metro.Programm.stationsList;

    public class JsonConverter {
        public static void route (String value) {
            List<String> info = new LinkedList<>();

            Pattern p = Pattern.compile( "\"([^\"]*)\"" );
            Matcher m = p.matcher(value);
            while (m.find()) {
                info.add(m.group(1));
            }

            if (info.size() == 4){
                String line1 = info.get(0);
                String stationName1 = info.get(1);
                String line2 = info.get(2);
                String stationName2 = info.get(3);

                Station station1 = null;
                Station station2 = null;
                boolean found1 = false;
                boolean found2 = false;

                for (Station station: stationsList) {
                    if (station.getName().equals(stationName1) && station.getLine().getLineName().equals(line1)) {
                        station1 = station;
                        found1 = true;
                    }
                    if (station.getName().equals(stationName2) && station.getLine().getLineName().equals(line2)) {
                        station2 = station;
                        found2 = true;
                    }
                }
                if (found1 && found2) {
                    BreadthFirstSearch breadthFirstSearch = new BreadthFirstSearch(station1, station2);
                    breadthFirstSearch.compute();
                    breadthFirstSearch.trace_route();
                }
            }
        }



        public static void output (String value) {
            List<Line> lines = new LinkedList<>();
            List<Station> lineStations = new LinkedList<>();
            List<String> lineNames = new LinkedList<>();

            String lineName = "";
            Pattern p = Pattern.compile("\"([^\"]*)\"");
            Matcher m = p.matcher(value);
            while (m.find()) {
                lineName = m.group(1);
            }

            for (Station station : stationsList) {
                Line line = station.getLine();
                if (!lines.contains(line)) {
                    lines.add(line);
                    lineNames.add(line.getLineName());
                }
            }

            String finalLineName = lineName;

            if (lineNames.contains(lineName)) {
                stationsList.stream()
                        .filter(x -> x.getLine().getLineName().equals(finalLineName))
                        .forEach(lineStations::add);

                Collections.sort(lineStations, Comparator.comparingInt(Station::getNumber));

                System.out.println("depot");
                for (Station station: lineStations) {
                    if (station.getTransfer() == null) {
                        System.out.println(station.getName());
                    } else {
                        String mainStation = station.getName();
                        String transferStation = station.getTransfer().getStation();
                        String transferLine = station.getTransfer().getLine();
                        System.out.println(mainStation + " - " + transferStation + " (" + transferLine + " line)");
                    }
                }
                System.out.println("depot");
            } else {
                System.out.println("No such line");
            }
        }

        public static void connect(String value) {
            List<String> info = new LinkedList<>();

            Pattern p = Pattern.compile( "\"([^\"]*)\"" );
            Matcher m = p.matcher(value);
            while (m.find()) {
                info.add(m.group(1));
            }
            info.stream().forEach(System.out::println);

            if (info.size() == 4){
                String line1 = info.get(0);
                String stationName1 = info.get(1);
                String line2 = info.get(2);
                String stationName2 = info.get(3);

                stationsList.stream()
                        .filter(x -> x.getName().equals(stationName1))
                        .filter(x -> x.getLine().getLineName().equals(line1))
                        .forEach(x -> x.setTransfer(new Transfer(stationName2, line2)));
                stationsList.stream()
                        .filter(x -> x.getName().equals(stationName2))
                        .filter(x -> x.getLine().getLineName().equals(line2))
                        .forEach(x -> x.setTransfer(new Transfer(stationName1, line1)));


            }

        }


        public static void append(String value) {
            List<String> lineAndStation = new LinkedList<>();

            Pattern p = Pattern.compile("\"([^\"]*)\"");
            Matcher m = p.matcher(value);
            while (m.find()) {
                lineAndStation.add(m.group(1));
            }

            if (lineAndStation.size() == 2) {
                String line = lineAndStation.get(0);
                String stationName = lineAndStation.get(1);

                int count = (int) stationsList.stream()
                        .filter(x -> x.getLine().getLineName().equals(line))
                        .count();
                stationsList.add(new Station(stationName, new Transfer(), new Line(line), ++count));

            } else {
                System.out.println("Wrong names parsing");
            }

        }

        public static void addHead(String value) {
            List<String> lineAndStation = new LinkedList<>();

            Pattern p = Pattern.compile("\"([^\"]*)\"");
            Matcher m = p.matcher(value);
            while (m.find()) {
                lineAndStation.add(m.group(1));
            }

            if (lineAndStation.size() == 2) {
                String line = lineAndStation.get(0);
                String stationName = lineAndStation.get(1);

                stationsList.add(new Station(stationName, new Transfer(), new Line(line), 0));
                stationsList.stream()
                        .filter(x -> x.getLine().getLineName().equals(line))
                        .forEach(x -> x.setNumber(x.getNumber() + 1));

            } else {
                System.out.println("Wrong names parsing");
            }

        }

        public static void remove(String value){
            List<String> lineAndStation = new LinkedList<>();

            Pattern p = Pattern.compile("\"([^\",.-]*)\"");
            Matcher m = p.matcher(value);
            while (m.find()) {
                lineAndStation.add(m.group(1));
            }

            if (lineAndStation.size() == 2) {
                String line = lineAndStation.get(0);
                String stationName = lineAndStation.get(1);
                List<Station> stations = stationsList.stream()
                        .filter(x -> x.getLine().getLineName().equals(line))
                        .filter(x -> x.getName().equals(stationName))
                        .collect(Collectors.toList());

                if (stations.size() == 1) {
                    Station station = stations.get(0);
                    int number = station.getNumber();
                    stationsList.remove(station);
                    stationsList.stream()
                            .filter(x -> x.getLine().getLineName().equals(line))
                            .filter(x -> x.getNumber() > number)
                            .forEach(x -> x.setNumber(x.getNumber() - 1));
                    stationsList.stream()
                            .filter(x -> x.getLine().getLineName().equals(line))
                            .forEach(System.out::println);
                } else {
                    System.out.println("Didn find station");
                }

            } else {
                System.out.println("Wrong names parsing");
            }

        }
    }
  learner_created: true
- name: src/metro/allLines/Line.java
  visible: true
  text: |
    package metro.allLines;

    import java.util.LinkedList;

    public class Line {
        private String lineName;

        public Line(String lineName) {
            this.lineName = lineName;
        }

        public String getLineName() {
            return lineName;
        }
    }
  learner_created: true
- name: src/metro/allLines/StationGsonSerializer.java
  visible: true
  text: |
    package metro.allLines;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonSerializationContext;
    import com.google.gson.JsonSerializer;
    import metro.allLines.Station;

    import java.lang.reflect.Type;

    public class StationGsonSerializer implements JsonSerializer<Station> {
        @Override
        public JsonElement serialize(Station src, Type typeOfSrc, JsonSerializationContext context) {
            JsonObject stationJsonObj = new JsonObject();
            JsonObject transferJsonObj = new JsonObject();

            String name = src.getName();
            String transferLine = src.getTransfer().getLine();
            String transferStation = src.getTransfer().getStation();

            transferJsonObj.addProperty("line", transferLine);
            transferJsonObj.addProperty("station", transferStation);




            stationJsonObj.addProperty("name", name);
            stationJsonObj.add("transfer", transferJsonObj);

            return stationJsonObj;
        }
    }
  learner_created: true
- name: src/metro/SinglyLinkedList.java
  visible: true
  text: |
    package metro;

    public class SinglyLinkedList<T> {
        private Node<T> head;

        private static class Node<T> {
            private T data;
            private Node<T> next;

            public Node() {
                this.data = data;
            }

            public void setData(T data) {
                this.data = data;
            }

            public void setNext(Node<T> next) {
                this.next = next;
            }

            public T getData() {
                return data;
            }

            public Node<T> getNext() {
                return next;
            }
        }

        public void addToHead(T value) {
            if (this.head == null) {
                this.head = new Node<>();
                this.head.setData(value);
            } else {
                Node<T> newNode = new Node<>();
                newNode.setData(value);
                newNode.setNext(this.head);
                this.head = newNode;
            }
        }

        public void addToTail(T value) {
            if (this.head == null) {
                this.head = new Node<>();
                this.head.setData(value);
            } else {
                Node<T> lastNode = this.head;
                while (lastNode.getNext() != null) {
                    lastNode = lastNode.getNext();
                }
                Node<T> newNode = new Node<>();
                newNode.setData(value);
                lastNode.setNext(newNode);
            }
        }

        public void printList() {
            if (this.head != null) {
                Node<T> currentNode = this.head;
                System.out.print("depot - ");
                while (currentNode != null) {
                    System.out.print(currentNode.getData() + " - ");
                    currentNode = currentNode.getNext();
                }
                System.out.println("depot");
            }
        }

        public void printAs1stStage() {
            if (this.head != null) {
                boolean completed = false;
                Node<T> headNewNode = this.head;
                Node<T> currentNode = this.head;
                while (!completed) {
                    String result = "";
                    for (int i = 0; i < 3; i++) {
                        if (currentNode == null) {
                            completed = true;
                            break;
                        }
                        result += currentNode.getData();
                        if (i < 2) {
                            result += " - ";
                        }
                        currentNode = currentNode.getNext();
                    }
                    headNewNode = headNewNode.getNext();
                    currentNode = headNewNode;
                    if (!completed) {
                        System.out.println(result);
                    }
                }
            }
        }

    }
  learner_created: true
- name: src/metro/FileHandler.java
  visible: true
  text: |
    package metro;

    import javax.swing.*;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.LinkedList;
    import java.util.List;
    import java.util.Scanner;

    public class FileHandler {

        public static String handleFile(String fileName) {
            String fileContent = "";
            try {
                fileContent = readFileAsString(fileName);
            } catch (IOException e) {
                System.out.println("Error! Such a file doesn't exist!");

            }
            return fileContent;
        }

        private static String readFileAsString(String fileName) throws IOException {
            return new String(Files.readAllBytes(Paths.get(fileName)));
        }

    }
  learner_created: true
- name: src/metro/CommandHandler.java
  visible: true
  text: |
    package metro;
    import static metro.Programm.isON;

    public class CommandHandler {


        public static void handleCommand(Command command) {
            String action = command.getCommand();

            switch (action) {
                case "output":
                    JsonConverter.output(command.getValue());
                    break;
                case "append":
                    JsonConverter.append(command.getValue());
                    break;
                case "add-head":
                    JsonConverter.addHead(command.getValue());
                    break;
                case "remove":
                    JsonConverter.remove(command.getValue());
                    break;
                case "connect":
                    JsonConverter.connect(command.getValue());
                    break;
                case "route":
                    JsonConverter.route(command.getValue());
                    break;
                case "exit":
                    isON = false;
                    break;
                default:
                    System.out.println("Invalid command");
            }


        }
    }
  learner_created: true
- name: src/metro/allLines/MetroGsonDeserializer.java
  visible: true
  text: |
    package metro.allLines;

    import com.google.gson.*;

    import java.lang.reflect.Type;
    import java.util.LinkedList;
    import java.util.List;

    public class MetroGsonDeserializer implements JsonDeserializer<Metro> {

        @Override
        public Metro deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
            List<Station> stations = new LinkedList<>();
            List<Line> lines = new LinkedList<>();
            JsonObject metroJsonObject;
            JsonObject stationsWithNumberJsonObject;
            JsonObject stationJsonObject;
            JsonArray transferJsonObject;

            metroJsonObject = json.getAsJsonObject();

            for (var entry: metroJsonObject.entrySet()) {
                lines.add(new Line(entry.getKey()));
            }

            for (Line line: lines) {
                stationsWithNumberJsonObject = metroJsonObject.get(line.getLineName()).getAsJsonObject();
                for (var entry: stationsWithNumberJsonObject.entrySet()) {
                    stationJsonObject = entry.getValue().getAsJsonObject();
                    String name = stationJsonObject.get("name").getAsString();

                    if (stationJsonObject.get("transfer").getAsJsonArray().isEmpty()) {
                        stations.add(new Station(name, new Transfer(), line, Integer.parseInt(entry.getKey())));
                    } else {
                        transferJsonObject = stationJsonObject.get("transfer").getAsJsonArray();
                        String transferLine = transferJsonObject.get(0).getAsJsonObject().get("line").getAsString();
                        String transferStation = transferJsonObject.get(0).getAsJsonObject().get("station").getAsString();
                        stations.add(new Station(name, new Transfer(transferLine, transferStation), line, Integer.parseInt(entry.getKey())));
                    }
                }
            }

            Metro metro = new Metro();
            metro.setStations(stations);

            return metro;
        }
    }
  learner_created: true
- name: src/metro/allLines/Transfer.java
  visible: true
  text: |
    package metro.allLines;

    public class Transfer {
        private String line;
        private String station;

        public Transfer(String line, String station) {
            this.line = line;
            this.station = station;
        }

        public Transfer() {
            this.line = null;
            this.station = null;
        }

        public void setLine(String line) {
            this.line = line;
        }

        public void setStation(String station) {
            this.station = station;
        }

        public String getLine() {
            return line;
        }

        public String getStation() {
            return station;
        }
    }
  learner_created: true
- name: src/metro/BreadthFirstSearch.java
  visible: true
  text: |
    package metro;

    import metro.allLines.Line;
    import metro.allLines.Station;

    import java.util.*;
    import java.util.stream.Collectors;

    import static metro.Programm.stationsList;


    public class BreadthFirstSearch {
        private Station startStation;
        private Station endStation;


        public BreadthFirstSearch(Station startStation, Station endStation) {
            this.startStation = startStation;
            this.endStation = endStation;
        }


        public Set<Station> compute() {
            if (this.startStation.equals(endStation)) {
                System.out.println("Completed");
            }

            Queue<Station> queue = new LinkedList<>();
            Set<Station> explored = new LinkedHashSet<>();
            queue.add(startStation);


            while (!queue.isEmpty()) {
                Station current = queue.remove();
                if (current.equals(endStation)) {
                    break;
                } else {
                    Set<Station> set = current.getChildren();
                    set.removeAll(explored);
                    if (!set.isEmpty()) {
                        queue.addAll(set);
                        set.forEach(x -> x.setPrevious(current));
                    }

                }
                explored.add(current);
            }
            return explored;
        }

        public void trace_route() {
            Station station = endStation;
            List<Station> route = new ArrayList<>();
            while (station != null) {
                route.add(station);
                station = station.getPrevious();
            }
            Collections.reverse(route);

            System.out.println(route.get(0).getName());
            for (int i = 1; i < route.size(); i++) {
                Line line = route.get(i).getLine();
                if (!line.equals(route.get(i - 1).getLine())) {
                    System.out.println("Transition to line " + line.getLineName());
                    System.out.println(route.get(i - 1).getTransfer().getStation());
                }
                System.out.println(route.get(i).getName());
            }
        }
    }
  learner_created: true
- name: src/metro/allLines/Station.java
  visible: true
  text: |
    package metro.allLines;

    import javax.xml.stream.events.EntityReference;
    import java.util.*;
    import java.util.stream.Collectors;

    import static metro.Programm.stationsList;

    public class Station {
        private String name;
        private Transfer transfer;
        private Line line;
        private int number;
        private Station previous;

        public void setPrevious(Station previous) {
            this.previous = previous;
        }

        public Station getPrevious() {
            return previous;
        }

        public Station(String name, Transfer transfer, Line line, int number) {
            this.name = name;
            this.transfer = transfer;
            this.line = line;
            this.number = number;
        }

        public Station(String name, Line line, int number) {
            this.name = name;
            this.line = line;
            this.number = number;
            this.transfer = null;
        }

        public void setNumber(int number) {
            this.number = number;
        }

        public int getNumber() {
            return number;
        }

        public Line getLine() {
            return line;
        }

        public String getName() {
            return name;
        }

        public Transfer getTransfer() {
            if (transfer.getStation() == null && transfer.getLine() == null) {
                return null;
            } else return transfer;
        }

        public void setTransfer(Transfer transfer) {
            this.transfer = transfer;
        }

        public Set<Station> getChildren() {
            Set<Station> children = new HashSet<>();

            String line1 = this.getLine().getLineName();


            List<Station> line1Stations = stationsList.stream()
                    .filter(x -> x.getLine().getLineName().equals(line1))
                    .sorted(Comparator.comparingInt(Station::getNumber))
                    .collect(Collectors.toList());
            int n = line1Stations.indexOf(this);
            if (n == 0 && line1Stations.size() > 1) {
                children.add(line1Stations.get(n + 1));
            } else if (n == line1Stations.size() - 1) {
                children.add(line1Stations.get(n - 1));
            } else {
                children.add(line1Stations.get(n + 1));
                children.add(line1Stations.get(n - 1));
            }

            if (this.getTransfer() != null) {
                String line2 = this.transfer.getLine();
                List<Station> line2Stations = stationsList.stream()
                        .filter(x -> x.getLine().getLineName().equals(line2))
                        .sorted(Comparator.comparingInt(Station::getNumber))
                        .collect(Collectors.toList());

                Station transferStation = null;
                for (Station station: stationsList) {
                    if (station.getName().equals(this.getTransfer().getStation()) && station.getLine().getLineName().equals(this.getTransfer().getLine())) {
                        transferStation = station;
                        break;
                    }
                }

                n = line2Stations.indexOf(transferStation);
                if (n == 0 && line2Stations.size() > 1) {
                    children.add(line2Stations.get(n + 1));
                } else if (n == line2Stations.size() - 1) {
                    children.add(line2Stations.get(n - 1));
                } else {
                    children.add(line2Stations.get(n + 1));
                    children.add(line2Stations.get(n - 1));
                }
            }

            return children;
        }
    }
  learner_created: true
- name: src/metro/allLines/Metro.java
  visible: true
  text: |
    package metro.allLines;

    import java.util.LinkedList;
    import java.util.List;

    public class Metro {

        private List<Station> stations;


        public Metro() {
        }

        public void setStations(List<Station> stations) {
            this.stations = stations;
        }


        public List<Station> getStations() {
            return stations;
        }
    }
  learner_created: true
- name: test/prague_w_time.json
  visible: false
  text: |-
    {
      "Linka A": {
        "0": {
          "name": "Nemocnice Motol",
          "transfer": [],
          "time": 5
        },
        "1": {
          "name": "Petriny",
          "transfer": [],
          "time": 5
        },
        "2": {
          "name": "Nadrazi Veleslavin",
          "transfer": [],
          "time": 3
        },
        "3": {
          "name": "Borislavka",
          "transfer": [],
          "time": 3
        },
        "4": {
          "name": "Dejvicka",
          "transfer": [],
          "time": 4
        },
        "5": {
          "name": "Hradcanska",
          "transfer": [],
          "time": 4
        },
        "6": {
          "name": "Malostranska",
          "transfer": [],
          "time": 1
        },
        "7": {
          "name": "Staromestska",
          "transfer": [],
          "time": 7
        },
        "8": {
          "name": "Mustek",
          "transfer": [
            {
              "line": "Linka B",
              "station": "Mustek"
            }
          ],
          "time": 8
        },
        "9": {
          "name": "Muzeum",
          "transfer": [
            {
              "line": "Linka C",
              "station": "Muzeum"
            }
          ],
          "time": 5
        },
        "10": {
          "name": "Namesti Miru",
          "transfer": [],
          "time": 7
        },
        "11": {
          "name": "Jiriho z Podebrad",
          "transfer": [],
          "time": 5
        },
        "12": {
          "name": "Flora",
          "transfer": [],
          "time": 7
        },
        "13": {
          "name": "Zelivskeho",
          "transfer": [],
          "time": 1
        },
        "14": {
          "name": "Strasnicka",
          "transfer": [],
          "time": 7
        },
        "15": {
          "name": "Skalka",
          "transfer": [],
          "time": 2
        },
        "16": {
          "name": "Depo Hostivar",
          "transfer": [],
          "time": null
        }
      },
      "Linka B": {
        "0": {
          "name": "Cerny Most",
          "transfer": [],
          "time": 3
        },
        "1": {
          "name": "Rajska zahrada",
          "transfer": [],
          "time": 5
        },
        "2": {
          "name": "Hloubetin",
          "transfer": [],
          "time": 4
        },
        "3": {
          "name": "Kolbenova",
          "transfer": [],
          "time": 1
        },
        "4": {
          "name": "Vysocanska",
          "transfer": [],
          "time": 6
        },
        "5": {
          "name": "Ceskomoravska",
          "transfer": [],
          "time": 5
        },
        "6": {
          "name": "Palmovka",
          "transfer": [],
          "time": 7
        },
        "7": {
          "name": "Invalidovna",
          "transfer": [],
          "time": 5
        },
        "8": {
          "name": "Krizikova",
          "transfer": [],
          "time": 1
        },
        "9": {
          "name": "Florenc",
          "transfer": [
            {
              "line": "Linka C",
              "station": "Florenc"
            }
          ],
          "time": 5
        },
        "10": {
          "name": "Namesti Republiky",
          "transfer": [],
          "time": 3
        },
        "11": {
          "name": "Mustek",
          "transfer": [
            {
              "line": "Linka A",
              "station": "Mustek"
            }
          ],
          "time": 7
        },
        "12": {
          "name": "Narodni trida",
          "transfer": [],
          "time": 3
        },
        "13": {
          "name": "Karlovo namesti",
          "transfer": [],
          "time": 4
        },
        "14": {
          "name": "Andel",
          "transfer": [],
          "time": 3
        },
        "15": {
          "name": "Smichovske nadrazi",
          "transfer": [],
          "time": 3
        },
        "16": {
          "name": "Radlicka",
          "transfer": [],
          "time": 4
        },
        "17": {
          "name": "Jinonice",
          "transfer": [],
          "time": 7
        },
        "18": {
          "name": "Nove Butovice",
          "transfer": [],
          "time": 2
        },
        "19": {
          "name": "Hurka",
          "transfer": [],
          "time": 7
        },
        "20": {
          "name": "Luziny",
          "transfer": [],
          "time": 5
        },
        "21": {
          "name": "Luka",
          "transfer": [],
          "time": 6
        },
        "22": {
          "name": "Stodulky",
          "transfer": [],
          "time": 7
        },
        "23": {
          "name": "Zlicin",
          "transfer": [],
          "time": null
        }
      },
      "Linka C": {
        "0": {
          "name": "Letnany",
          "transfer": [],
          "time": 3
        },
        "1": {
          "name": "Prosek",
          "transfer": [],
          "time": 7
        },
        "2": {
          "name": "Strizkov",
          "transfer": [],
          "time": 5
        },
        "3": {
          "name": "Ladvi",
          "transfer": [],
          "time": 4
        },
        "4": {
          "name": "Kobylisy",
          "transfer": [],
          "time": 5
        },
        "5": {
          "name": "Nadrazi Holesovice",
          "transfer": [],
          "time": 7
        },
        "6": {
          "name": "Vltavska",
          "transfer": [],
          "time": 2
        },
        "7": {
          "name": "Florenc",
          "transfer": [
            {
              "line": "Linka B",
              "station": "Florenc"
            }
          ],
          "time": 7
        },
        "8": {
          "name": "Hlavni nadrazi",
          "transfer": [],
          "time": 2
        },
        "9": {
          "name": "Muzeum",
          "transfer": [
            {
              "line": "Linka A",
              "station": "Muzeum"
            }
          ],
          "time": 5
        },
        "10": {
          "name": "I.P.Pavlova",
          "transfer": [],
          "time": 5
        },
        "11": {
          "name": "Vysehrad",
          "transfer": [],
          "time": 4
        },
        "12": {
          "name": "Prazskeho povstani",
          "transfer": [],
          "time": 7
        },
        "13": {
          "name": "Pankrac",
          "transfer": [],
          "time": 5
        },
        "14": {
          "name": "Budejovicka",
          "transfer": [],
          "time": 5
        },
        "15": {
          "name": "Kacerov",
          "transfer": [],
          "time": 4
        },
        "16": {
          "name": "Roztyly",
          "transfer": [],
          "time": 7
        },
        "17": {
          "name": "Chodov",
          "transfer": [],
          "time": 6
        },
        "18": {
          "name": "Opatov",
          "transfer": [],
          "time": 5
        },
        "19": {
          "name": "Haje",
          "transfer": [],
          "time": null
        }
      }
    }
  learner_created: false
- name: src/metro/Dijkstra.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10345#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 23 Dec 2022 22:54:35 UTC
record: 5
